{"version":3,"sources":["Form.js","Body.js","App.js","serviceWorker.js","index.js"],"names":["SearchFrom","props","className","name","onChange","e","callbackFromParent","target","value","type","placeholder","onClick","preventDefault","loadGifs","Body","images","map","img","i","key","src","original","url","App","myCallback","dataFromChild","setState","searchValue","a","axios","get","state","then","res","data","catch","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uTA6BeA,MA3Bf,SAAoBC,GAkBhB,OACI,0BAAMC,UAAU,eACZ,2BAAOA,UAAU,eAAeC,KAAK,cAAcC,SAdtC,SAACC,GAClBJ,EAAMK,mBAAmBD,EAAEE,OAAOC,QAa6CC,KAAK,OAAOC,YAAY,cACnG,4BAAQR,UAAU,gBAAgBS,QARrB,SAACN,GAClBA,EAAEO,iBACFX,EAAMY,aAMF,YCXGC,MATf,SAAcb,GAAQ,IACVc,EAAWd,EAAXc,OACR,OACI,yBAAKb,UAAU,UACVa,EAAOC,KAAI,SAACC,EAAKC,GAAN,OAAY,yBAAKhB,UAAU,UAAUiB,IAAKD,EAAGE,IAAKH,EAAIF,OAAOM,SAASC,W,iBC2C/EC,E,YA1Cb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAQRuB,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEC,YAAaF,KAVZ,EAiBnBZ,SAjBmB,sBAiBR,sBAAAe,EAAA,sEACHC,IAAMC,IAAN,mIAAsI,EAAKC,MAAMJ,cACpJK,MAAK,SAAAC,GACJ,IAAMlB,EAASkB,EAAIC,KAAKA,KACxB,EAAKR,SAAS,CAAEX,cAEjBoB,OAAM,WACLC,QAAQC,IAAI,wBAPP,2CAfT,EAAKN,MAAQ,CACXJ,YAAa,KACbZ,OAAQ,IAJO,E,sEA6BjB,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,CACEI,mBAAoBgC,KAAKd,WACzBX,SAAUyB,KAAKzB,WAEjB,kBAAC,EAAD,CAAME,OAAQuB,KAAKP,MAAMhB,c,GApCfwB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.fc4e95b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction SearchFrom(props) {\r\n\r\n    /**\r\n     * this function sends the input value to our callback\r\n     * once we change its value \r\n     */\r\n    const handleChange = (e) => {\r\n        props.callbackFromParent(e.target.value);\r\n    }\r\n\r\n    /**\r\n     * This function load and gifs once we click on the Search buttons\r\n     */\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.loadGifs();\r\n    }\r\n\r\n    return (\r\n        <form className='search-form' >\r\n            <input className='search-input' name='searchValue' onChange={handleChange} type='text' placeholder='Search...'></input>\r\n            <button className='search-button' onClick={handleSubmit}>Search</button>\r\n        </form >\r\n    )\r\n\r\n}\r\n\r\nexport default SearchFrom;","/* eslint-disable jsx-a11y/alt-text */\r\nimport React from 'react'\r\n\r\nfunction Body(props) {\r\n    const { images } = props;\r\n    return (\r\n        <div className='images'>\r\n            {images.map((img, i) => <img className='gif-img' key={i} src={img.images.original.url}></img>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body;","/* eslint-disable jsx-a11y/alt-text */\nimport React from 'react';\nimport './App.css';\nimport Searcgform from './Form'\nimport Body from './Body'\nimport axios from 'axios'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchValue: null,\n      images: []\n    };\n  }\n\n  // This callback function is responsible for getting the data from Form component child\n  myCallback = (dataFromChild) => {\n    this.setState({ searchValue: dataFromChild });\n  }\n\n  /**\n   * This function fetchs the data from Gify API and we get a new array of objects\n   * from it and set the new value to out images array in the state\n   */\n  loadGifs = async () => {\n    await axios.get(`https://api.giphy.com/v1/gifs/search?api_key=6g1ejTMvjizWD8rGmVTfiF3tNYp9MHDW&q=cat&limit=25&offset=0&rating=G&lang=en&q=${this.state.searchValue}`)\n      .then(res => {\n        const images = res.data.data;\n        this.setState({ images })\n      })\n      .catch(function () {\n        console.log(\"Couldn't get gifs\");\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Searcgform\n          callbackFromParent={this.myCallback}\n          loadGifs={this.loadGifs}\n        />\n        <Body images={this.state.images} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}